use serde::Deserialize;
use std::collections::HashMap;
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaAchievementPrototype {
    pub allowed_without_fight: bool,
    pub hidden: bool,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaAmmoCategoryPrototype {
    pub bonus_gui_order: String,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaAutoplaceControlPrototype {
    pub can_be_disabled: bool,
    pub category: String,
    pub control_order: String,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub richness: bool,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaCustomInputPrototype {
    pub action: String,
    pub alternative_key_sequence: String,
    pub consuming: String,
    pub enabled: bool,
    pub enabled_while_in_cutscene: bool,
    pub enabled_while_spectating: bool,
    pub include_selected_prototype: bool,
    pub item_to_spawn: LuaItemPrototype,
    pub key_sequence: String,
    pub linked_game_control: String,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaDamagePrototype {
    pub hidden: bool,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaDecorativePrototype {
    pub autoplace_specification: AutoplaceSpecification,
    pub collision_box: BoundingBox,
    pub collision_mask: CollisionMask,
    pub collision_mask_with_flags: CollisionMaskWithFlags,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
pub struct LuaEntityPrototypeCreatedSmoke {}
#[derive(Debug, Deserialize)]
pub struct LuaEntityPrototypeLogisticParameters {}
#[derive(Debug, Deserialize)]
pub struct LuaEntityPrototypeMineableProperties {}
#[derive(Debug, Deserialize)]
pub struct LuaEntityPrototypeSpawnCooldown {}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaEntityPrototype {
    pub active_energy_usage: f64,
    pub additional_pastable_entities: Vec<()>,
    pub adjacent_tile_collision_box: BoundingBox,
    pub adjacent_tile_collision_mask: CollisionMask,
    pub adjacent_tile_collision_test: CollisionMask,
    pub affected_by_tiles: bool,
    pub air_resistance: f64,
    pub alert_icon_shift: Vector,
    pub alert_when_attacking: bool,
    pub alert_when_damaged: bool,
    pub allow_access_to_all_forces: bool,
    pub allow_burner_leech: bool,
    pub allow_copy_paste: bool,
    pub allow_custom_vectors: bool,
    pub allow_passengers: bool,
    pub allow_run_time_change_of_is_military_target: bool,
    pub always_on: bool,
    pub ammo_category: String,
    pub animation_speed_coefficient: f64,
    pub attack_parameters: AttackParameters,
    pub attack_result: Vec<()>,
    pub automated_ammo_count: u32,
    pub automatic_weapon_cycling: bool,
    pub autoplace_specification: AutoplaceSpecification,
    pub base_productivity: f64,
    pub belt_distance: f64,
    pub belt_length: f64,
    pub belt_speed: f64,
    pub braking_force: f64,
    pub build_base_evolution_requirement: f64,
    pub build_distance: u32,
    pub building_grid_bit_shift: u32,
    pub burner_prototype: LuaBurnerPrototype,
    pub burns_fluid: bool,
    pub call_for_help_radius: f64,
    pub can_open_gates: bool,
    pub center_collision_mask: CollisionMask,
    pub chain_shooting_cooldown_modifier: f64,
    pub character_corpse: LuaEntityPrototype,
    pub chunk_exploration_radius: f64,
    pub cliff_explosive_prototype: String,
    pub collision_box: BoundingBox,
    pub collision_mask: CollisionMask,
    pub collision_mask_collides_with_self: bool,
    pub collision_mask_collides_with_tiles_only: bool,
    pub collision_mask_considers_tile_transitions: bool,
    pub collision_mask_with_flags: CollisionMaskWithFlags,
    pub color: Color,
    pub construction_radius: f64,
    pub consumption: f64,
    pub container_distance: f64,
    pub count_as_rock_for_filtered_deconstruction: bool,
    pub crafting_speed: f64,
    pub create_ghost_on_death: bool,
    pub created_effect: Vec<()>,
    pub created_smoke: LuaEntityPrototypeCreatedSmoke,
    pub damage_hit_tint: Color,
    pub darkness_for_all_lamps_off: f32,
    pub darkness_for_all_lamps_on: f32,
    pub default_collision_mask_with_flags: CollisionMaskWithFlags,
    pub destroy_non_fuel_fluid: bool,
    pub distraction_cooldown: u32,
    pub distribution_effectivity: f64,
    pub door_opening_speed: f64,
    pub draw_cargo: bool,
    pub drawing_box: BoundingBox,
    pub drop_item_distance: u32,
    pub dying_speed: f32,
    pub effectivity: f64,
    pub electric_energy_source_prototype: LuaElectricEnergySourcePrototype,
    pub emissions_per_second: f64,
    pub enemy_map_color: Color,
    pub energy_per_hit_point: f64,
    pub energy_per_move: f64,
    pub energy_per_tick: f64,
    pub energy_usage: f64,
    pub engine_starting_speed: f64,
    pub enter_vehicle_distance: f64,
    pub explosion_beam: f64,
    pub explosion_rotate: f64,
    pub fast_replaceable_group: String,
    pub filter_count: u32,
    pub final_attack_result: Vec<()>,
    pub fixed_recipe: String,
    pub flags: EntityPrototypeFlags,
    pub fluid: LuaFluidPrototype,
    pub fluid_capacity: f64,
    pub fluid_energy_source_prototype: LuaFluidEnergySourcePrototype,
    pub fluid_usage_per_tick: f64,
    pub fluidbox_prototypes: Vec<()>,
    pub flying_acceleration: f64,
    pub flying_speed: f64,
    pub friction_force: f64,
    pub friendly_map_color: Color,
    pub grid_prototype: LuaEquipmentGridPrototype,
    pub group: LuaGroup,
    pub has_belt_immunity: bool,
    pub healing_per_tick: f32,
    pub heat_buffer_prototype: LuaHeatBufferPrototype,
    pub heat_energy_source_prototype: LuaHeatEnergySourcePrototype,
    pub height: f64,
    pub idle_energy_usage: f64,
    pub indexed_guns: Vec<()>,
    pub infinite_depletion_resource_amount: u32,
    pub infinite_resource: bool,
    pub ingredient_count: u32,
    pub inserter_chases_belt_items: bool,
    pub inserter_drop_position: Vector,
    pub inserter_extension_speed: f64,
    pub inserter_pickup_position: Vector,
    pub inserter_rotation_speed: f64,
    pub inserter_stack_size_bonus: f64,
    pub instruments: Vec<()>,
    pub is_building: bool,
    pub is_entity_with_owner: bool,
    pub is_military_target: bool,
    pub item_pickup_distance: f64,
    pub item_slot_count: u32,
    pub items_to_place_this: Vec<()>,
    pub lab_inputs: Vec<()>,
    pub lamp_energy_usage: f64,
    pub launch_wait_time: u8,
    pub light_blinking_speed: f64,
    pub localised_description: String,
    pub localised_name: String,
    pub logistic_mode: String,
    pub logistic_parameters: LuaEntityPrototypeLogisticParameters,
    pub logistic_radius: f64,
    pub loot: Vec<()>,
    pub loot_pickup_distance: f64,
    pub manual_range_modifier: f64,
    pub map_color: Color,
    pub map_generator_bounding_box: BoundingBox,
    pub max_circuit_wire_distance: f64,
    pub max_count_of_owned_units: f64,
    pub max_darkness_to_spawn: f32,
    pub max_distance_of_nearby_sector_revealed: u32,
    pub max_distance_of_sector_revealed: u32,
    pub max_energy: f64,
    pub max_energy_production: f64,
    pub max_energy_usage: f64,
    pub max_friends_around_to_spawn: f64,
    pub max_health: f32,
    pub max_payload_size: u32,
    pub max_polyphony: u32,
    pub max_power_output: f64,
    pub max_pursue_distance: f64,
    pub max_speed: f64,
    pub max_to_charge: f32,
    pub max_underground_distance: u8,
    pub max_wire_distance: f64,
    pub maximum_corner_sliding_distance: f64,
    pub maximum_temperature: f64,
    pub min_darkness_to_spawn: f32,
    pub min_pursue_time: u32,
    pub min_to_charge: f32,
    pub mineable_properties: LuaEntityPrototypeMineableProperties,
    pub minimum_resource_amount: u32,
    pub mining_drill_radius: f64,
    pub mining_speed: f64,
    pub module_inventory_size: u32,
    pub move_while_shooting: bool,
    pub name: String,
    pub neighbour_bonus: f64,
    pub next_upgrade: LuaEntityPrototype,
    pub normal_resource_amount: u32,
    pub object_name: String,
    pub order: String,
    pub pollution_to_join_attack: f32,
    pub protected_from_tile_building: bool,
    pub pumping_speed: f64,
    pub radar_range: u32,
    pub radius: f64,
    pub reach_distance: u32,
    pub reach_resource_distance: f64,
    pub related_underground_belt: LuaEntityPrototype,
    pub remains_when_mined: Vec<()>,
    pub remove_decoratives: String,
    pub repair_speed_modifier: u32,
    pub researching_speed: f64,
    pub resource_category: String,
    pub respawn_time: u32,
    pub result_units: Vec<()>,
    pub rising_speed: f64,
    pub rocket_entity_prototype: LuaEntityPrototype,
    pub rocket_parts_required: u32,
    pub rocket_rising_delay: u8,
    pub rotation_speed: f64,
    pub running_speed: f64,
    pub scale_fluid_usage: bool,
    pub secondary_collision_box: BoundingBox,
    pub selectable_in_game: bool,
    pub selection_box: BoundingBox,
    pub selection_priority: u32,
    pub shooting_cursor_size: f64,
    pub spawn_cooldown: LuaEntityPrototypeSpawnCooldown,
    pub spawning_radius: f64,
    pub spawning_spacing: f64,
    pub spawning_time_modifier: f64,
    pub speed: f64,
    pub speed_multiplier_when_out_of_energy: f32,
    pub stack: bool,
    pub sticker_box: BoundingBox,
    pub subgroup: LuaGroup,
    pub supply_area_distance: f64,
    pub supports_direction: bool,
    pub tank_driving: bool,
    pub target_temperature: f64,
    pub terrain_friction_modifier: f32,
    pub ticks_to_keep_aiming_direction: u32,
    pub ticks_to_keep_gun: u32,
    pub ticks_to_stay_in_combat: u32,
    pub tile_height: u32,
    pub tile_width: u32,
    pub time_to_live: u32,
    pub timeout: u32,
    pub torso_bob_speed: f64,
    pub torso_rotation_speed: f64,
    pub tree_color_count: u8,
    pub trigger_collision_mask: CollisionMaskWithFlags,
    pub turret_range: u32,
    pub turret_rotation_speed: f64,
    pub r#type: String,
    pub use_exact_mode: bool,
    pub valid: bool,
    pub vision_distance: f64,
    pub void_energy_source_prototype: LuaVoidEnergySourcePrototype,
    pub weight: f64,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaEquipmentCategoryPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaEquipmentGridPrototype {
    pub equipment_categories: Vec<()>,
    pub height: u32,
    pub localised_description: String,
    pub localised_name: String,
    pub locked: bool,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
    pub width: u32,
}
#[derive(Debug, Deserialize)]
pub struct LuaEquipmentPrototypeLogisticParameters {}
#[derive(Debug, Deserialize)]
pub struct LuaEquipmentPrototypeShape {}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaEquipmentPrototype {
    pub attack_parameters: AttackParameters,
    pub automatic: bool,
    pub background_color: Color,
    pub burner_prototype: LuaBurnerPrototype,
    pub electric_energy_source_prototype: LuaElectricEnergySourcePrototype,
    pub energy_consumption: f64,
    pub energy_per_shield: f64,
    pub energy_production: f64,
    pub energy_source: LuaElectricEnergySourcePrototype,
    pub equipment_categories: Vec<()>,
    pub localised_description: String,
    pub localised_name: String,
    pub logistic_parameters: LuaEquipmentPrototypeLogisticParameters,
    pub movement_bonus: f32,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub shape: LuaEquipmentPrototypeShape,
    pub shield: f32,
    pub take_result: LuaItemPrototype,
    pub r#type: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaFluidPrototype {
    pub base_color: Color,
    pub default_temperature: f64,
    pub emissions_multiplier: f64,
    pub flow_color: Color,
    pub fuel_value: f64,
    pub gas_temperature: f64,
    pub group: LuaGroup,
    pub heat_capacity: f64,
    pub hidden: bool,
    pub localised_description: String,
    pub localised_name: String,
    pub max_temperature: f64,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub subgroup: LuaGroup,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaFontPrototype {
    pub border: bool,
    pub border_color: Color,
    pub filtered: bool,
    pub from: String,
    pub name: String,
    pub object_name: String,
    pub size: i32,
    pub spacing: f32,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaFuelCategoryPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaGroup {
    pub group: LuaGroup,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub order_in_recipe: String,
    pub subgroups: Vec<()>,
    pub r#type: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaItemPrototype {
    pub alt_entity_filter_mode: String,
    pub alt_reverse_alt_entity_filter_mode: String,
    pub alt_reverse_selection_border_color: Color,
    pub alt_reverse_selection_cursor_box_type: String,
    pub alt_reverse_selection_mode_flags: SelectionModeFlags,
    pub alt_reverse_tile_filter_mode: String,
    pub alt_selection_border_color: Color,
    pub alt_selection_cursor_box_type: String,
    pub alt_selection_mode_flags: SelectionModeFlags,
    pub alt_tile_filter_mode: String,
    pub always_include_tiles: bool,
    pub attack_parameters: AttackParameters,
    pub burnt_result: LuaItemPrototype,
    pub can_be_mod_opened: bool,
    pub capsule_action: CapsuleAction,
    pub category: String,
    pub curved_rail: LuaEntityPrototype,
    pub default_label_color: Color,
    pub default_request_amount: u32,
    pub draw_label_for_cursor_render: bool,
    pub durability: f64,
    pub durability_description_key: String,
    pub entity_filter_mode: String,
    pub entity_filter_slots: u32,
    pub equipment_grid: LuaEquipmentGridPrototype,
    pub extend_inventory_by_default: bool,
    pub filter_mode: String,
    pub flags: ItemPrototypeFlags,
    pub fuel_acceleration_multiplier: f64,
    pub fuel_category: String,
    pub fuel_emissions_multiplier: f64,
    pub fuel_top_speed_multiplier: f64,
    pub fuel_value: f32,
    pub group: LuaGroup,
    pub infinite: bool,
    pub insertion_priority_mode: String,
    pub inventory_size: u32,
    pub inventory_size_bonus: u32,
    pub limitation_message_key: String,
    pub limitations: Vec<()>,
    pub localised_description: String,
    pub localised_filter_message: String,
    pub localised_name: String,
    pub magazine_size: f32,
    pub mapper_count: u32,
    pub module_effects: ModuleEffects,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub place_as_equipment_result: LuaEquipmentPrototype,
    pub place_as_tile_result: PlaceAsTileResult,
    pub place_result: LuaEntityPrototype,
    pub reload_time: f32,
    pub repair_result: Vec<()>,
    pub reverse_alt_entity_filter_mode: String,
    pub reverse_selection_border_color: Color,
    pub reverse_selection_cursor_box_type: String,
    pub reverse_selection_mode_flags: SelectionModeFlags,
    pub reverse_tile_filter_mode: String,
    pub rocket_launch_products: Vec<()>,
    pub selection_border_color: Color,
    pub selection_cursor_box_type: String,
    pub selection_mode_flags: SelectionModeFlags,
    pub speed: f32,
    pub stack_size: u32,
    pub stackable: bool,
    pub straight_rail: LuaEntityPrototype,
    pub subgroup: LuaGroup,
    pub tier: u32,
    pub tile_filter_mode: String,
    pub tile_filter_slots: u32,
    pub r#type: String,
    pub valid: bool,
    pub wire_count: u32,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaModSettingPrototype {
    pub allow_blank: bool,
    pub auto_trim: bool,
    pub hidden: bool,
    pub localised_description: String,
    pub localised_name: String,
    pub r#mod: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub setting_type: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaModuleCategoryPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaNoiseLayerPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaParticlePrototype {
    pub ended_in_water_trigger_effect: TriggerEffectItem,
    pub life_time: u32,
    pub localised_description: String,
    pub localised_name: String,
    pub mining_particle_frame_speed: f32,
    pub movement_modifier: f32,
    pub movement_modifier_when_on_ground: f32,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub regular_trigger_effect: TriggerEffectItem,
    pub regular_trigger_effect_frequency: u32,
    pub render_layer: RenderLayer,
    pub render_layer_when_on_ground: RenderLayer,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaRecipeCategoryPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaRecipePrototype {
    pub allow_as_intermediate: bool,
    pub allow_decomposition: bool,
    pub allow_inserter_overload: bool,
    pub allow_intermediates: bool,
    pub always_show_made_in: bool,
    pub always_show_products: bool,
    pub category: String,
    pub emissions_multiplier: f64,
    pub enabled: bool,
    pub energy: f64,
    pub group: LuaGroup,
    pub hidden: bool,
    pub hidden_from_flow_stats: bool,
    pub hidden_from_player_crafting: bool,
    pub ingredients: Vec<()>,
    pub localised_description: String,
    pub localised_name: String,
    pub main_product: Product,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub overload_multiplier: u32,
    pub products: Vec<()>,
    pub request_paste_multiplier: u32,
    pub show_amount_in_title: bool,
    pub subgroup: LuaGroup,
    pub unlock_results: bool,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaResourceCategoryPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaShortcutPrototype {
    pub action: String,
    pub associated_control_input: String,
    pub item_to_spawn: LuaItemPrototype,
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub technology_to_unlock: LuaTechnologyPrototype,
    pub toggleable: bool,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaTechnologyPrototype {
    pub effects: Vec<()>,
    pub enabled: bool,
    pub hidden: bool,
    pub ignore_tech_cost_multiplier: bool,
    pub level: u32,
    pub localised_description: String,
    pub localised_name: String,
    pub max_level: u32,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub research_unit_count: u32,
    pub research_unit_count_formula: String,
    pub research_unit_energy: f64,
    pub research_unit_ingredients: Vec<()>,
    pub upgrade: bool,
    pub valid: bool,
    pub visible_when_disabled: bool,
}
#[derive(Debug, Deserialize)]
pub struct LuaTilePrototypeMineableProperties {}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaTilePrototype {
    pub automatic_neighbors: bool,
    pub autoplace_specification: AutoplaceSpecification,
    pub can_be_part_of_blueprint: bool,
    pub check_collision_with_entities: bool,
    pub collision_mask: CollisionMask,
    pub collision_mask_with_flags: CollisionMaskWithFlags,
    pub decorative_removal_probability: f32,
    pub emissions_per_second: f64,
    pub items_to_place_this: Vec<()>,
    pub layer: u32,
    pub localised_description: String,
    pub localised_name: String,
    pub map_color: Color,
    pub mineable_properties: LuaTilePrototypeMineableProperties,
    pub name: String,
    pub needs_correction: bool,
    pub next_direction: LuaTilePrototype,
    pub object_name: String,
    pub order: String,
    pub valid: bool,
    pub vehicle_friction_modifier: f32,
    pub walking_speed_modifier: f32,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaTrivialSmokePrototype {
    pub affected_by_wind: bool,
    pub color: Color,
    pub cyclic: bool,
    pub duration: u32,
    pub end_scale: f64,
    pub fade_away_duration: u32,
    pub fade_in_duration: u32,
    pub glow_animation: bool,
    pub glow_fade_away_duration: u32,
    pub localised_description: String,
    pub localised_name: String,
    pub movement_slow_down_factor: f64,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub render_layer: RenderLayer,
    pub show_when_smoke_off: bool,
    pub spread_duration: u32,
    pub start_scale: f64,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct LuaVirtualSignalPrototype {
    pub localised_description: String,
    pub localised_name: String,
    pub name: String,
    pub object_name: String,
    pub order: String,
    pub special: bool,
    pub subgroup: LuaGroup,
    pub valid: bool,
}
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct Prototypes {
    pub entity_prototypes: Option<HashMap<String, LuaEntityPrototype>>,
    pub item_prototypes: Option<HashMap<String, LuaItemPrototype>>,
    pub fluid_prototypes: Option<HashMap<String, LuaFluidPrototype>>,
    pub tile_prototypes: Option<HashMap<String, LuaTilePrototype>>,
    pub equipment_prototypes: Option<HashMap<String, LuaEquipmentPrototype>>,
    pub damage_prototypes: Option<HashMap<String, LuaDamagePrototype>>,
    pub virtual_signal_prototypes: Option<HashMap<String, LuaVirtualSignalPrototype>>,
    pub equipment_grid_prototypes: Option<HashMap<String, LuaEquipmentGridPrototype>>,
    pub recipe_prototypes: Option<HashMap<String, LuaRecipePrototype>>,
    pub technology_prototypes: Option<HashMap<String, LuaTechnologyPrototype>>,
    pub decorative_prototypes: Option<HashMap<String, LuaDecorativePrototype>>,
    pub particle_prototypes: Option<HashMap<String, LuaParticlePrototype>>,
    pub autoplace_control_prototypes: Option<HashMap<String, LuaAutoplaceControlPrototype>>,
    pub noise_layer_prototypes: Option<HashMap<String, LuaNoiseLayerPrototype>>,
    pub mod_setting_prototypes: Option<HashMap<String, LuaModSettingPrototype>>,
    pub custom_input_prototypes: Option<HashMap<String, LuaCustomInputPrototype>>,
    pub ammo_category_prototypes: Option<HashMap<String, LuaAmmoCategoryPrototype>>,
    pub item_subgroup_prototypes: Option<HashMap<String, LuaGroup>>,
    pub item_group_prototypes: Option<HashMap<String, LuaGroup>>,
    pub fuel_category_prototypes: Option<HashMap<String, LuaFuelCategoryPrototype>>,
    pub resource_category_prototypes: Option<HashMap<String, LuaResourceCategoryPrototype>>,
    pub achievement_prototypes: Option<HashMap<String, LuaAchievementPrototype>>,
    pub module_category_prototypes: Option<HashMap<String, LuaModuleCategoryPrototype>>,
    pub equipment_category_prototypes: Option<HashMap<String, LuaEquipmentCategoryPrototype>>,
    pub trivial_smoke_prototypes: Option<HashMap<String, LuaTrivialSmokePrototype>>,
    pub shortcut_prototypes: Option<HashMap<String, LuaShortcutPrototype>>,
    pub recipe_category_prototypes: Option<HashMap<String, LuaRecipeCategoryPrototype>>,
    pub font_prototypes: Option<HashMap<String, LuaFontPrototype>>,
}

